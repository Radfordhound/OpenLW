// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "Player/Base/PlayerPosture.h"
#include "Player/Base/PlayerCollision.h"

namespace csl
{
namespace math
{
struct Vector3;
struct Quaternion;
} // math
} // csl

namespace app
{
namespace game
{
class PathEvaluator;
} // game

namespace Player
{
class CPhysics;
class SGroundInfo;
class CCollision;

class CPostureCommon : public CBasePosture
{
public:
    LWAPI(0x029630f0, TODO)
    ~CPostureCommon();

    LWAPI(0x02962660, 0x00871d70)
    void Calculate(CPhysics& param_1, float param_2);

    LWAPI(0x0295ef6c, TODO)
    void TransferForMovable(CPhysics& param_1, csl::math::Vector3* param_2, const csl::math::Vector3& param_3, const csl::math::Quaternion& param_4);

    LWAPI(0x0295efe4, TODO)
    void MaxSlopeForUpdateMove(CPhysics& param_1, bool param_2);

    LWAPI(0x0295f048, TODO)
    void CheckHitGround(SGroundInfo& param_1, CPhysics& param_2, const csl::math::Vector3& param_3, const csl::math::Vector3& param_4, const csl::math::Vector3& param_5);

    LWAPI(0x0295f200, TODO)
    void UpdateRotationForHitGround(CPhysics& param_1, CCollision& param_2, SGroundInfo const& param_3, csl::math::Vector3& param_4);

    LWAPI(0x0295f488, TODO)
    void UpdateDistanceToGround(CPhysics& param_1);

    LWAPI(0x0295f7e0, TODO)
    void UpdateMove(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3);

    LWAPI(0x02960160, TODO)
    void PushOutForMovable(CPhysics& param_1, csl::math::Vector3* param_2, csl::math::Vector3* param_3, const csl::math::Vector3& param_4, const csl::math::Vector3& param_5, const csl::math::Vector3& param_6);

    LWAPI(0x02960168, TODO)
    void CalculateCollision1(CPhysics& param_1, const csl::math::Vector3& param_2, float param_3);

    LWAPI(0x0296029c, TODO)
    void CalculateCollision2(CPhysics& param_1, csl::math::Vector3* param_2, csl::math::Vector3* param_3, const csl::math::Vector3& param_4, SGroundInfo* param_5);

    LWAPI(0x02960468, TODO)
    void UpdateMoveSimplify(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3);

    LWAPI(0x029608e4, TODO)
    void UpdateMoveIgnoreGround(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3, bool param_4);

    LWAPI(0x02960aec, TODO)
    void UpdateDistanceToTopRoof(CPhysics& param_1);

    LWAPI(0x02960c08, TODO)
    void UpdatePitchRoll(CPhysics& param_1, float param_2);

    LWAPI(0x02961340, TODO)
    void UpdateRotation(CPhysics& param_1, float param_2, bool param_3);

    LWAPI(0x02961364, TODO)
    void UpdateVelocityAlongPath(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3, game::PathEvaluator* param_4);

    LWAPI(0x02961780, TODO)
    void UpdateMoveHoldingOnGround(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3, bool param_4);

    LWAPI(0x02962290, TODO)
    void UpdateMoveHoldingOnGround(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3);

    LWAPI(0x029623f8, TODO)
    void AdvancePathPosition(CPhysics& param_1, game::PathEvaluator& param_2);

    LWAPI(0x02962490, TODO)
    void CheckEndAndResearch2DPath(CPhysics& param_1);

    LWAPI(0x02962828, TODO)
    void CalculateSV1(CPhysics& param_1, float param_2);

    LWAPI(0x029629e8, TODO)
    void CalculateSV2(CPhysics& param_1, float param_2);

    LWAPI(0x02962b50, TODO)
    void CalculateWithoutHoldingGround(CPhysics& param_1, float param_2);

    LWAPI(0x02962be4, TODO)
    void CalculateSimple(CPhysics& param_1, float param_2, bool param_3);

    LWAPI(0x02962c74, TODO)
    void CalculateFor3DCommon(CPhysics& param_1, float param_2);

    LWAPI(0x02962d30, TODO)
    void UpdateVelocityAlong2DPath(CPhysics& param_1, float param_2, const csl::math::Vector3& param_3);

    LWAPI(0x02962e10, TODO)
    void GetCollisionSurfaceInfo(ESurfaceDirection param_1) const;

    LWAPI(0x02962e44, TODO)
    void GetCollisionSurfaceInfo(unsigned int param_1) const;

    LWAPI(0x02962e7c, TODO)
    void GetCollisionSurfaceNum() const;

    LWAPI(0x02962ea4, TODO)
    void CheckReversedVelocityByHitWall(CPhysics& param_1, const csl::math::Vector3& param_2, const csl::math::Vector3& param_3, const csl::math::Vector3& param_4, float param_5);
};
} // Player
} // app
