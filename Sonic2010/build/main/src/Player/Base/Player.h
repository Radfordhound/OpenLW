// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "System/Component/Goc.h"
#include "System/GameObject3D.h"
#include "Utility/RefPtr.h"

namespace csl
{
namespace math
{
struct Matrix34;
} // math
} // csl

namespace app
{
class GameDocument;

namespace fnd
{
class Message;
struct SUpdateInfo;
} // fnd

namespace game
{
class PathComponent;
class GravityField;
} // game

namespace xgame
{
class MsgGetPosition;
class MsgGetRotation;
class MsgGetVelocity;
class MsgGetFrontDirection;
class MsgGetUpDirection;
class MsgGetRightDirection;
class MsgGetDirectionToCamera;
class MsgGetCameraTargetPosition;
class MsgPLGetRotation;
class MsgPLGetGravity;
class MsgPLGetAngle;
class MsgGetGroundInfo;
class MsgIs2DMode;
class MsgPLGetPathInfo;
class MsgPLGetPlayer;
class MsgPLGetInputButton;
class MsgPLGetEnvironment;
class MsgPLGetPhantomType;
class MsgPLGetPixieType;
class MsgPLDisableInput;
class MsgPLDisableVisual;
class MsgGetHomingTargetSuccessiveInfo;
class MsgDebugSetPlayerPosition;
class MsgPLGetPhysics;
class MsgPLGetPathService;
class MsgPLRequestGameOver;
class MsgPLGetInputDirection;
} // xgame

namespace Player
{
struct SCinfo;
class CPlayerVehicle;
class CPostureInputManager;
class CPostureMoveManager;
class CPhysics;
class CBlackBoard;
class CStateGOC;

class CPlayer : public GameObject3D
{
OPENLW_PROTECTED
    unsigned char m_padding2[12]; // TODO
    CGOCCollection<10> m_components;
    CPostureInputManager* m_postureInputManager;
    CPostureMoveManager* m_postureMoveManager;
    CPhysics* m_physics;
    ut::RefPtr<CBlackBoard> m_blackBoard;

    // TODO

public:
    template<typename T>
    T* GetPlayerGOC()
    {
        return static_cast<T*>(m_components.GetGOC(T::ID));
    }

    template<typename T>
    const T* GetPlayerGOC() const
    {
        return static_cast<const T*>(m_components.GetGOC(T::ID));
    }

    LWAPI(0x02918478, 0x00850c90)
    CStateGOC* GetStateGOC();

    LWAPI(0x02918518, TODO)
    void ResetVehicleOwner();

    LWAPI(0x0291857c, TODO)
    unsigned int GetPlayerNo() const;

    LWAPI(0x02918ab0, TODO)
    ~CPlayer();

    LWAPI(0x02918ba8, TODO)
    bool PreProcessMessage(fnd::Message& msg);

    LWAPI(0x02918bcc, TODO)
    void ProcMsgGetPosition(xgame::MsgGetPosition& param_1);

    LWAPI(0x02918c14, TODO)
    void ProcMsgGetRotation(xgame::MsgGetRotation& param_1);

    LWAPI(0x02918c48, TODO)
    void ProcMsgGetVelocity(xgame::MsgGetVelocity& param_1);

    LWAPI(0x02918c7c, TODO)
    void ProcMsgGetFrontDirection(xgame::MsgGetFrontDirection& param_1);

    LWAPI(0x02918ce8, TODO)
    void ProcMsgGetUpDirection(xgame::MsgGetUpDirection& param_1);

    LWAPI(0x02918d54, TODO)
    void ProcMsgGetRightDirection(xgame::MsgGetRightDirection& param_1);

    LWAPI(0x02918dc0, TODO)
    void ProcMsgGetDirectionToCamera(xgame::MsgGetDirectionToCamera& param_1);

    LWAPI(0x02918e84, TODO)
    void ProcMsgGetCameraTargetPosition(xgame::MsgGetCameraTargetPosition& param_1);

    LWAPI(0x02918efc, TODO)
    void ProcMsgPLGetRotation(xgame::MsgPLGetRotation& param_1);

    LWAPI(0x02918f30, TODO)
    void ProcMsgPLGetGravity(xgame::MsgPLGetGravity& param_1);

    LWAPI(0x02918fa0, TODO)
    void ProcMsgPLGetAngle(xgame::MsgPLGetAngle& param_1);

    LWAPI(0x02919018, TODO)
    void ProcMsgGetGroundInfo(xgame::MsgGetGroundInfo& param_1);

    LWAPI(0x0291906c, TODO)
    void ProcMsgIs2DMode(xgame::MsgIs2DMode& param_1);

    LWAPI(0x029190b4, TODO)
    void ProcMsgPLGetPathInfo(xgame::MsgPLGetPathInfo& param_1);

    LWAPI(0x029190dc, TODO)
    void ProcMsgPLGetPlayer(xgame::MsgPLGetPlayer& param_1);

    LWAPI(0x029190f0, TODO)
    void GetInputGOC() const;

    LWAPI(0x029190f4, TODO)
    void ProcMsgPLGetInputButton(xgame::MsgPLGetInputButton& param_1);

    LWAPI(0x029191c0, TODO)
    void ProcMsgPLGetEnvironment(xgame::MsgPLGetEnvironment& param_1);

    LWAPI(0x029191fc, TODO)
    void ProcMsgPLGetPhantomType(xgame::MsgPLGetPhantomType& param_1);

    LWAPI(0x0291923c, TODO)
    void ProcMsgPLGetPixieType(xgame::MsgPLGetPixieType& param_1);

    LWAPI(0x02919288, TODO)
    void ProcMsgPLDisableInput(xgame::MsgPLDisableInput& param_1);

    LWAPI(0x029192cc, TODO)
    void ProcMsgPLDisableVisual(xgame::MsgPLDisableVisual& param_1);

    LWAPI(0x02919370, TODO)
    void ProcMsgGetHomingTargetSuccessiveInfo(xgame::MsgGetHomingTargetSuccessiveInfo& param_1);

    LWAPI(0x029198a0, TODO)
    bool ProcessMessage(fnd::Message& msg);

    LWAPI(0x029198cc, TODO)
    void UpdateTransform();

    LWAPI(0x02919ce0, 0x00850c70)
    float GetParameter(unsigned int param_1) const;

    LWAPI(0x02919d14, TODO)
    void UpdatePlayerInformation();

    LWAPI(0x0291a664, TODO)
    void UpdateGroundShapeInfo();

    LWAPI(0x0291a7b0, TODO)
    void UpdateDebugInfo(const fnd::SUpdateInfo& param_1);

    LWAPI(0x0291a8cc, TODO)
    void SwitchDebugCamera();

    LWAPI(0x0291ac0c, TODO)
    void UpdateDebugCamera(float param_1);

    LWAPI(0x0291b1b8, TODO)
    void SetApplyGravityFromUpDirection(bool param_1);

    LWAPI(0x0291b234, TODO)
    void UpdateApplyGravityFromDirection(float param_1);

    LWAPI(0x0291b40c, TODO)
    void Update(const fnd::SUpdateInfo& param_1);

    LWAPI(0x0291bb64, TODO)
    void CreateCommonGOC();

    LWAPI(0x0291bd38, TODO)
    CPlayer(SCinfo const& param_1);

    LWAPI(0x0291c1ac, TODO)
    void GetMatrix() const;

    LWAPI(0x0291c238, TODO)
    void AddCallback(GameDocument* param_1);

    LWAPI(0x0291c940, TODO)
    void GetLevelInfo() const;

    LWAPI(0x0291c948, TODO)
    void GetCameraActorID();

    LWAPI(0x0291c98c, TODO)
    void SendMessageToMyself(fnd::Message& param_1);

    LWAPI(0x0291c99c, TODO)
    void ChangeDimension(bool param_1, bool param_2, game::PathComponent* param_3, float param_4);

    LWAPI(0x0291cbf0, TODO)
    void ProcMsgDebugSetPlayerPosition(xgame::MsgDebugSetPlayerPosition& param_1);

    LWAPI(0x0291d13c, TODO)
    void ProcMsgPLGetPhysics(xgame::MsgPLGetPhysics& param_1);

    LWAPI(0x0291d168, TODO)
    void ProcMsgPLGetPathService(xgame::MsgPLGetPathService& param_1);

    LWAPI(0x0291d194, TODO)
    void ProcMsgPLRequestGameOver(xgame::MsgPLRequestGameOver& param_1);

    LWAPI(0x0291d1e8, TODO)
    void ProcMsgPLGetInputDirection(xgame::MsgPLGetInputDirection& param_1);

    LWAPI(0x0291d25c, TODO)
    void SetEnableTouchPanel(bool param_1);

    LWAPI(0x0291d298, TODO)
    void ChangeToTopView(bool param_1);

    LWAPI(0x0291d2d8, TODO)
    void ProcessCallbackAction(const char* param_1, unsigned int param_2);

    LWAPI(0x0291d32c, TODO)
    void ProcessCallbackEffect(const char* param_1, unsigned int param_2);

    LWAPI(0x0291d380, TODO)
    void ProcessCallbackHand(const char* param_1, unsigned int param_2);

    LWAPI(0x0291d3d4, TODO)
    void GetGameID();

    LWAPI(0x0291d3e0, TODO)
    void GetHudID();

    LWAPI(0x0291d404, TODO)
    void GetRivalActorID();

    LWAPI(0x0291d448, TODO)
    void GetRivalPlayerNo();

    LWAPI(0x0291d470, TODO)
    void GetWorld() const;

    LWAPI(0x0291d478, TODO)
    void GetPhysicsWorld() const;

    LWAPI(0x0291d480, TODO)
    void GetPhysicsWorldConst() const;

    LWAPI(0x0291d488, TODO)
    void GetCollisionWorld() const;

    LWAPI(0x0291d490, TODO)
    void GetCameraID() const;

    LWAPI(0x0291d498, TODO)
    void InitializePlayerInformation();

    LWAPI(0x0291d49c, TODO)
    void GravitySwitched(game::GravityField* param_1);

    LWAPI(0x0291d5ec, TODO)
    void IsRadioControlExist() const;

    LWAPI(0x0291d618, TODO)
    void GetRCActorID() const;

    LWAPI(0x0291d63c, TODO)
    void SendMessageToRC(fnd::Message& param_1);

    LWAPI(0x0291d694, TODO)
    void SendMessageImmToRC(fnd::Message& param_1);

    LWAPI(0x0291d6f0, TODO)
    void GetPlayerVehicle();

    LWAPI(0x0291d728, TODO)
    void SetPlayerVehicle(CPlayerVehicle* param_1);

    LWAPI(0x0291d730, TODO)
    void ResetPlayerVehicle(CPlayerVehicle* param_1);

    LWAPI(0x0291d790, TODO)
    void HaveVehicle();

    LWAPI(0x0291d798, TODO)
    bool IsBattleMode() const;

    LWAPI(0x0291d7c8, TODO)
    void Warp();

    LWAPI(0x0291d8e0, TODO)
    void UpdateDebugTool(int param_1, float param_2);

    LWAPI(0x0291ef98, TODO)
    void UseOrbitCameraExternalMatrix(bool param_1);

    LWAPI(0x0291efc0, TODO)
    void SetOrbitCameraExternalMatrix(const csl::math::Matrix34& param_1);

    LWAPI(0x0291efe8, TODO)
    void SetOrbitCameraSyncDirection(bool param_1);
};
} // Player
} // app
