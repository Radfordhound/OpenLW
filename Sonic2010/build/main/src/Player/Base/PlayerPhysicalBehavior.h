// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "PlayerCollision.h"
#include "Player/Parameter/PlayerParameter.h"
#include "System/ReferencedObject.h"
#include <csl/math/vector3.h>
#include <csl/math/quaternion.h>
#include <csl/math/matrix34.h>
#include <csl/ut/bitset.h>

namespace app
{
namespace game
{
class GOCGravity;
class GravityField;
class ColliShape;
} // game

namespace Player
{
class CPlayer;

struct TouchedMovableShapeInfo
{
    // TODO: Any members?

    enum EType
    {
        // TODO
    };

    LWAPI(0x02925440, TODO)
    void Reset();

    LWAPI(0x02925498, TODO)
    void UpdateMatrix(csl::math::Vector3 const& param_1);

    LWAPI(0x02925548, TODO)
    void Set(EType param_1, game::ColliShape const* param_2, csl::math::Vector3 const& param_3);

    LWAPI(0x029255d4, TODO)
    bool IsValid() const;

    LWAPI(0x02925620, TODO)
    bool IsGround() const;

    LWAPI(0x02925674, TODO)
    void GetDisplacement(csl::math::Vector3* param_1) const;
};

class CPhysics : public fnd::ReferencedObject
{
OPENLW_PRIVATE
    CPlayer* m_player;
    unsigned int field_0x10;
    unsigned char padding1[0xc];
    csl::math::Vector3 m_position;
    csl::math::Quaternion m_rotation;
    csl::math::Matrix34 m_matrix;
    /** @brief Current velocity of the player. */
    csl::math::Vector3 m_velocity;
    /** @brief Velocity from the previous frame. */
    csl::math::Vector3 m_previousVelocity;
    /** @brief Which direction gravity is facing (usually down). */
    csl::math::Vector3 m_gravityDirection;
    csl::math::Vector3 m_inputForce;
    /** @brief The sum of all external forces currently being applied
      * to the player's movement (e.g. dash panel or spring velocity).
    */
    csl::math::Vector3 m_externalMoveForce;
    csl::math::Vector3 m_drawnForce;
    csl::math::Vector3 m_drawnPosition;

public:
    csl::math::Vector3 upDir;

OPENLW_PRIVATE
    unsigned char padding2[0x10];
    csl::math::Vector3 m_historyPosition[256];
    csl::math::Quaternion m_historyRotation[256];
    csl::math::Vector3 m_historyVelocity[256];
    float m_historyTime[256];
    csl::ut::Bitset<unsigned int> field_0x3510;
    unsigned char padding3[0xc];
    csl::math::Matrix34 field_0x3520;

public:
    SGroundInfo groundInfo;

OPENLW_PRIVATE
    unsigned char padding4[0x1A0];

public:
    LWAPI(0x02925a28, TODO)
    CPhysics(CPlayer& param_1);

    LWAPI(0x02925ec4, TODO)
    ~CPhysics();

    LWAPI(0x02925f44, TODO)
    void Initialize(game::GOCGravity* param_1);

    LWAPI(0x02925f6c, TODO)
    void SetMatrix(csl::math::Matrix34 const& param_1);

    LWAPI(0x02926008, 0x00855650)
    void SetPosition(csl::math::Vector3 const& pos);

    LWAPI(0x02926224, TODO)
    void NormalizeRotationMatrix();

    LWAPI(0x029264a8, TODO)
    void SetRotation(csl::math::Quaternion const& param_1);

    LWAPI(0x02926600, TODO)
    void SetRotation(csl::math::Matrix34 const& param_1);

    LWAPI(0x0292670c, TODO)
    void SetRotation(csl::math::Vector3 const& param_1, csl::math::Vector3 const& param_2, csl::math::Vector3 const& param_3);

    LWAPI(0x029267c8, TODO)
    void GetPostureInputForce(csl::math::Vector3 const& param_1) const;

    LWAPI(0x0292690c, TODO)
    void GetPitchRoll();

    LWAPI(0x02926a70, TODO)
    void GetYaw();

    LWAPI(0x02926b1c, TODO)
    void SetGroundInfo(SGroundInfo const& param_1);

    LWAPI(0x02926c00, TODO)
    void ResetGroundInfo();

    LWAPI(0x02926c6c, 0x00854dd0)
    bool IsOnGround() const;

    LWAPI(0x02926c74, TODO)
    void SetOnGround(bool param_1);

    LWAPI(0x02926c84, TODO)
    void GetGravityController();

    LWAPI(0x02926c8c, TODO)
    void ResetGroundState();

    LWAPI(0x02926d0c, TODO)
    bool IsRideOnMovable() const;

    LWAPI(0x02926d14, TODO)
    void GetVertVelocity() const;

    LWAPI(0x02926da0, TODO)
    void SetHorzVelocity(csl::math::Vector3 const& param_1);

    LWAPI(0x02926e28, 0x004cf110)
    void SetVelocity(csl::math::Vector3 const& velocity);

    LWAPI(0x02926e30, 0x00934470)
    const csl::math::Vector3& GetVelocity() const;

    LWAPI(0x02926e38, TODO)
    void GetHorzVelocity() const;

    LWAPI(0x02926ee8, TODO)
    void SetVertVelocity(csl::math::Vector3 const& param_1);

    LWAPI(0x02926f70, 0x00855920)
    float GetHorzVelocityLength() const;

    LWAPI(0x02927070, 0x00856b10)
    csl::math::Vector3 GetHorzVelocityDir() const;

    LWAPI(0x029270f4, TODO)
    void GetVertVelocityDir() const;

    LWAPI(0x02927178, TODO)
    void GetVertVelocityScalar() const;

    LWAPI(0x029271dc, TODO)
    void GetParameter(Param::Index param_1) const;

    LWAPI(0x029271e4, TODO)
    void GetGravityUpDirection() const;

    LWAPI(0x0292726c, TODO)
    void GetSpeedParameter() const;

    LWAPI(0x02927274, 0x00855c80)
    csl::math::Vector3 CalcUpDirectionByVelocity(csl::math::Vector3 const& param_1) const;

    LWAPI(0x029273d0, TODO)
    void GetGravityDirection() const;

    LWAPI(0x029273f8, TODO)
    void UpdateViewMatrix();

    LWAPI(0x029274fc, TODO)
    bool IsGravityDirectionNotUpdate(csl::math::Vector3 const& param_1, bool param_2) const;

    LWAPI(0x02927864, TODO)
    bool IsDistableExternalForce();

    LWAPI(0x02927870, TODO)
    void EnableExternalForce();

    LWAPI(0x02927888, TODO)
    void UpdateBeforeMove(float param_1);

    LWAPI(0x02927a90, TODO)
    void GetHistoryID(unsigned char param_1) const;

    LWAPI(0x02927ab8, TODO)
    void GetHistoryPosition(unsigned char param_1) const;

    LWAPI(0x02927ae4, TODO)
    void GetGravityUpMatrix() const;

    LWAPI(0x02927b0c, TODO)
    void UpdateAfterMove(float param_1);

    LWAPI(0x02927c54, TODO)
    void UpdateHistoryData(float param_1);

    LWAPI(0x02927d48, TODO)
    void SetGravityScale(float param_1);

    LWAPI(0x02927d70, TODO)
    void ResetGravity();

    LWAPI(0x02927d98, TODO)
    void SetGravitySize(float param_1);

    LWAPI(0x02927dc0, TODO)
    void ResetGravitySize();

    LWAPI(0x02927de8, TODO)
    void GetGravityForce() const;

    LWAPI(0x02927e10, TODO)
    void SetUseDefaultGravityScale(bool param_1);

    LWAPI(0x02927e44, TODO)
    void GetGravitySize() const;

    LWAPI(0x02927e6c, TODO)
    void GetGravityScale() const;

    LWAPI(0x02927e94, TODO)
    void GetGravityController() const;

    LWAPI(0x02927e9c, TODO)
    void SetGravityDisable(bool param_1);

    LWAPI(0x02927ed0, TODO)
    bool IsGravityDisable() const;

    LWAPI(0x02927f00, TODO)
    bool IsGravityTypeRunPath() const;

    LWAPI(0x02927f24, TODO)
    bool IsGravityFieldCylinderLarge() const;

    LWAPI(0x02927f80, TODO)
    void RotateVelocityByGravity(csl::math::Vector3 const& param_1, csl::math::Quaternion* param_2);

    LWAPI(0x02928098, TODO)
    void GetGravityInnerRadius(float* param_1) const;

    LWAPI(0x029280bc, TODO)
    void GetGravityUpDirection(csl::math::Vector3 const& param_1, bool param_2);

    LWAPI(0x0292822c, 0x00856ef0)
    void UpdateGravity(csl::math::Vector3 const& param_1, bool param_2);

    LWAPI(0x02928310, TODO)
    void UpdateGravityForced(csl::math::Vector3 const& param_1);

    LWAPI(0x02928338, TODO)
    void GravitySwitched(game::GravityField* param_1);

    LWAPI(0x029283a8, TODO)
    void SetInputForce(csl::math::Vector3 const& param_1);

    LWAPI(0x029283b0, 0x00855a20)
    void AddVelocity(csl::math::Vector3 const& val);

    LWAPI(0x0292841c, TODO)
    void AddInternalForce(csl::math::Vector3 const& param_1, float param_2);

    LWAPI(0x02928494, TODO)
    void SetDrawnForce(csl::math::Vector3 const& param_1);

    LWAPI(0x0292849c, TODO)
    void GetDrawnForce() const;

    LWAPI(0x029284a4, TODO)
    void SetDrawnPosition(csl::math::Vector3 const& param_1);

    LWAPI(0x029284ac, TODO)
    void GetDrawnPosition() const;

    LWAPI(0x029284b4, TODO)
    void UpdateExternalMoveForce(float param_1);

    LWAPI(0x029285ac, 0x00856f70)
    void ApplyExternalForceToMove(float deltaTime, float param_2);

    LWAPI(0x0292862c, TODO)
    void GetUp() const;

    LWAPI(0x02928638, TODO)
    void GetFront() const;

    LWAPI(0x02928644, TODO)
    void CheckInputBrake();

    LWAPI(0x029288d8, TODO)
    void CheckInputBack();

    LWAPI(0x02928a50, TODO)
    bool IsEnableBrakeSpeed();

    LWAPI(0x02928aec, TODO)
    void GetRotationForMoveCollision() const;

    LWAPI(0x02928b70, TODO)
    void GetRotationFromUp(csl::math::Vector3 const& param_1) const;

    LWAPI(0x02928c4c, TODO)
    void GetRotationForMoveCollision(csl::math::Vector3 const& param_1) const;

    LWAPI(0x02928c64, TODO)
    bool IsLandEnableGround(csl::math::Vector3 const& param_1, csl::math::Vector3 const& param_2) const;

    LWAPI(0x02928d60, 0x00855fb0)
    bool IsLandEnableGroundToGravityWorldUp(csl::math::Vector3 const& param_1);

    LWAPI(0x02928dcc, TODO)
    bool IsLandEnableGroundToGravityWorldUp(csl::math::Vector3 const& param_1, csl::math::Vector3 const& param_2);

    LWAPI(0x02928e40, TODO)
    void DisableExternalForce(float param_1);

    LWAPI(0x02928e54, TODO)
    void GetRight() const;

    LWAPI(0x02928f14, TODO)
    void GetHistoryRotation(unsigned char param_1) const;

    LWAPI(0x02928f40, TODO)
    void GetHistoryVelocity(unsigned char param_1) const;

    LWAPI(0x02928f6c, TODO)
    void GetHistoryByTime(float param_1) const;

    LWAPI(0x02928fec, TODO)
    void GetHistoryPosition(float param_1) const;

    LWAPI(0x0292901c, TODO)
    void GetHistoryRotation(float param_1) const;

    LWAPI(0x0292904c, TODO)
    void GetHistoryVelocity(float param_1) const;

    LWAPI(0x0292907c, TODO)
    void GetAverageVelocity(float param_1) const;

    LWAPI(0x02929208, TODO)
    void InitHistory();

    LWAPI(0x029292a0, TODO)
    void ConvertAirHorzVector(csl::math::Vector3 const& param_1);

    LWAPI(0x02929388, TODO)
    void ConvertAirVertVector(csl::math::Vector3 const& param_1);

    LWAPI(0x02929450, TODO)
    void ConvertAirVector(csl::math::Vector3 const& param_1);

    LWAPI(0x029294e8, TODO)
    void GetSpeedParameter();

    LWAPI(0x029294f0, TODO)
    void GetMaxDesiredVelocity() const;

    LWAPI(0x02929514, 0x00855280)
    float GetMaxAirVelocity() const;

    LWAPI(0x02929538, TODO)
    void GetAccelerationRate() const;

    LWAPI(0x0292955c, TODO)
    void GetMaxDesiredRate() const;

    LWAPI(0x02929580, TODO)
    void SetSpeedParameter2D(bool param_1);

    LWAPI(0x029295a4, TODO)
    void GetDefaultDashMaxSpeed() const;

    LWAPI(0x029295c8, TODO)
    void GetDefaultSpinDashMaxSpeed() const;

    LWAPI(0x029295f4, TODO)
    void GetBlackBoard() const;

    LWAPI(0x02929600, TODO)
    void GetStickVector(csl::math::Vector3* param_1);

    LWAPI(0x02929720, TODO)
    void GetStickVector();

    LWAPI(0x02929784, TODO)
    void GetStickVectorV(csl::math::Vector3* param_1);

    LWAPI(0x02929854, TODO)
    void GetStickVectorH(csl::math::Vector3* param_1);

    LWAPI(0x02929924, TODO)
    void GetSubStickVector(csl::math::Vector3* param_1);

    LWAPI(0x02929a30, TODO)
    void GetSubStickVector();

    LWAPI(0x02929a94, TODO)
    void GetCameraVector();

    LWAPI(0x02929b6c, TODO)
    void GetCameraAxis(csl::math::Vector3* param_1, csl::math::Vector3* param_2, csl::math::Vector3* param_3);

    LWAPI(0x02929d14, TODO)
    void GetCenterPos(float param_1, csl::math::Vector3* param_2);

    LWAPI(0x02929de8, TODO)
    void CheckGroundShapeChanged(game::ColliShape const** param_1, game::ColliShape const** param_2);

    LWAPI(0x02929ee4, TODO)
    void GetPositions(float param_1, int param_2, csl::math::Vector3* param_3);

    LWAPI(0x02929f0c, TODO)
    bool IsEnableLandingGravityAngle(csl::math::Vector3 const& param_1, csl::math::Vector3 const& param_2) const;

    LWAPI(0x02929f74, TODO)
    void UpdateTouchedShapeInfo(csl::math::Vector3 const& param_1);

    LWAPI(0x02929fc4, TODO)
    void SetTouchedCollision(TouchedMovableShapeInfo::EType param_1, game::ColliShape const* param_2, csl::math::Vector3 const& param_3);

    LWAPI(0x02929fd4, TODO)
    void ResetTouchedCollision();

    LWAPI(0x02929fdc, TODO)
    void GetTouchedMovableShapeInfo() const;

    LWAPI(0x02929fe4, TODO)
    void GetRideOnMovableShape() const;

    LWAPI(0x0292a038, TODO)
    bool IsOutOfControl() const;
};

LWAPI_STATIC_ASSERT_SIZE(CPhysics, 0x3740)
} // Player
} // app
