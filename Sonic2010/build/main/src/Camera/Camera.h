// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "System/GameObject.h"
#include <csl/math/matrix34.h>
#include <csl/math/vector3.h>
#include <csl/ut/array.h>
#include <boost/intrusive_ptr.hpp>

namespace app
{
struct GameDocument;

namespace fnd
{
struct Message;
struct SUpdateInfo;
} // fnd

namespace xgame
{
struct MsgCameraReset;
struct MsgGetFrontDirection;
struct MsgGetPosition;
struct MsgGetCameraTargetPosition;
struct MsgGetCameraUpDirection;
struct MsgSetDebugCamera;
struct MsgIsDebugCamera;
struct MsgPushCameraController;
struct MsgPopCameraController;
struct MsgChangePlayerCamera;
struct MsgGetCameraDefaultFovy;
struct MsgGetCameraFovy;
struct MsgIs2DMode;
struct MsgCameraBeginQuickStep;
struct MsgCameraEndQuickStep;
struct MsgShakeCamera;
struct MsgRandomShakeCamera;
struct MsgStartEventCamera;
struct MsgEndEventCamera;
struct MsgSetCamera3DParam;
struct MsgSetCamera3DParamDashMode;
struct MsgSetCameraPosition;
struct MsgSetViewport;
struct MsgGetViewport;
struct MsgSetCameraReset;
struct MsgSetInterpolate;
struct MsgResetInterpolate;
struct MsgGetMultiCameraStatus;
struct MsgCameraUpdate;
struct MsgFocusChange;
struct MsgPLStargGroundImpulse;
struct MsgBeginBoost;
struct MsgEndBoost;
} // xgame

namespace Camera
{
struct CCameraController;

enum EPlayerCamera
{
    // TODO
};

enum EInterpolateType
{
    // TODO
};

class CCamera : public GameObject
{
OPENLW_PRIVATE
    struct SCameraListUnit
    {
        CCameraController* CameraController;
        unsigned int field_0x4;
    };

    struct SCinfo
    {
        // TODO
    };

    csl::ut::MoveArray<SCameraListUnit> field_0xD0;
    csl::math::Matrix34 field_0xE0;
    bool field_0x120;
    boost::intrusive_ptr<CCameraController> field_0x124;
    boost::intrusive_ptr<CCameraController> field_0x128;
    EPlayerCamera field_0x12C;
    unsigned int field_0x130;
    char padding1[12];
    csl::math::Vector3 field_0x140;
    csl::math::Vector3 field_0x150;
    csl::math::Vector3 field_0x160;
    unsigned int field_0x170;
    unsigned int field_0x174;
    float m_fovyBase;
    float m_fovyDefault;
    float m_fovyOffset;
    int m_cameraType;
    bool field_0x188;
    char padding2[87];
    csl::math::Vector3 field_0x1E0;
    csl::math::Vector3 field_0x1F0;
    char padding3[60];
    unsigned int padding4; // Only exists to align the next Vector3 to 16.
    csl::math::Vector3 field_0x240;
    char padding5[12];
    bool m_isBattle;

public:
    LWAPI(0x02031C1C, TODO)
    ~CCamera();

    LWAPI(0x02031D3C, TODO)
    bool PreProcessMessage(fnd::Message& param_1);

    LWAPI(0x02031DA4, TODO)
    void SetCameraResourceParam();

    LWAPI(0x02031F5C, TODO)
    void ProcMsgCameraReset(xgame::MsgCameraReset& param_1);

    LWAPI(0x0203220C, TODO)
    void ProcMsgGetFrontDirection(xgame::MsgGetFrontDirection& param_1);

    LWAPI(0x020322A0, TODO)
    void ProcMsgGetPosition(xgame::MsgGetPosition& param_1);

    LWAPI(0x020322B0, TODO)
    void ProcMsgGetCameraTargetPosition(xgame::MsgGetCameraTargetPosition& param_1);

    LWAPI(0x020322E8, TODO)
    void ProcMsgGetCameraUpDirection(xgame::MsgGetCameraUpDirection& param_1);

    LWAPI(0x02032520, TODO)
    void GetTopPriorityCamera();

    LWAPI(0x020326AC, TODO)
    void GetCameraTargetPositionForPlayer(bool param_1);

    LWAPI(0x020327C0, TODO)
    void SetInterpolate(const CCameraController* param_1, float param_2, EInterpolateType param_3);

    LWAPI(0x02032980, TODO)
    void PushCamera(CCameraController* param_1, float param_2, unsigned int param_3, EInterpolateType param_4);

    LWAPI(0x02032AF8, TODO)
    void PopCamera(CCameraController* param_1, float param_2, EInterpolateType param_3);

    LWAPI(0x02032C34, TODO)
    void ProcMsgSetDebugCamera(xgame::MsgSetDebugCamera& param_1);

    LWAPI(0x02032C38, TODO)
    void IsDebugModeCamera();

    LWAPI(0x02032C40, TODO)
    void ProcMsgIsDebugCamera(xgame::MsgIsDebugCamera& param_1);

    LWAPI(0x02032C88, TODO)
    void ProcMsgPushCameraController(xgame::MsgPushCameraController& param_1);

    LWAPI(0x02032CF8, TODO)
    void ProcMsgPopCameraController(xgame::MsgPopCameraController& param_1);

    LWAPI(0x02032D10, TODO)
    void CreatePlayerCamera(EPlayerCamera param_1, bool param_2);

    LWAPI(0x02032FF0, TODO)
    void ProcMsgChangePlayerCamera(xgame::MsgChangePlayerCamera& param_1);

    LWAPI(0x02033094, TODO)
    void ProcMsgGetCameraDefaultFovy(xgame::MsgGetCameraDefaultFovy& param_1);

    LWAPI(0x020330A4, TODO)
    void ProcMsgGetCameraFovy(xgame::MsgGetCameraFovy& param_1);

    LWAPI(0x020330BC, TODO)
    void ProcMsgIs2DMode(xgame::MsgIs2DMode& param_1);

    LWAPI(0x020330CC, TODO)
    void ProcMsgCameraBeginQuickStep(xgame::MsgCameraBeginQuickStep& param_1);

    LWAPI(0x02033170, TODO)
    void ProcMsgCameraEndQuickStep(xgame::MsgCameraEndQuickStep& param_1);

    LWAPI(0x0203340C, TODO)
    void ProcMsgShakeCamera(xgame::MsgShakeCamera& param_1);

    LWAPI(0x020335AC, TODO)
    void ProcMsgRandomShakeCamera(xgame::MsgRandomShakeCamera& param_1);

    LWAPI(0x020336C8, TODO)
    void ProcMsgStartEventCamera(xgame::MsgStartEventCamera& param_1);

    LWAPI(0x020336CC, TODO)
    void ProcMsgEndEventCamera(xgame::MsgEndEventCamera& param_1);

    LWAPI(0x020336D0, TODO)
    void ProcMsgSetCamera3DParam(xgame::MsgSetCamera3DParam& param_1);

    LWAPI(0x02033784, TODO)
    void ProcMsgSetCamera3DParamDashMode(xgame::MsgSetCamera3DParamDashMode& param_1);

    LWAPI(0x02033838, TODO)
    void ProcMsgSetCameraPosition(xgame::MsgSetCameraPosition& param_1);

    LWAPI(0x02033844, TODO)
    void ProcMsgSetViewport(xgame::MsgSetViewport& param_1);

    LWAPI(0x020338AC, TODO)
    void ProcMsgGetViewport(xgame::MsgGetViewport& param_1);

    LWAPI(0x02033918, TODO)
    void ProcMsgSetCameraReset(xgame::MsgSetCameraReset& param_1);

    LWAPI(0x02033A04, TODO)
    void ProcMsgSetInterpolate(xgame::MsgSetInterpolate& param_1);

    LWAPI(0x02033A74, TODO)
    void ProcMsgResetInterpolate(xgame::MsgResetInterpolate& param_1);

    LWAPI(0x02033AB4, TODO)
    void MultiCameraIsValid(CCameraController* param_1);

    LWAPI(0x02033B34, TODO)
    void ProcMsgGetMultiCameraStatus(xgame::MsgGetMultiCameraStatus& param_1);

    LWAPI(0x02033B9C, TODO)
    void ProcMsgCameraUpdate(xgame::MsgCameraUpdate& param_1);

    LWAPI(0x02033BE4, TODO)
    void ProcMsgFocusChange(xgame::MsgFocusChange& param_1);

    LWAPI(0x02033C1C, TODO)
    void ProcMsgPLStargGroundImpulse(xgame::MsgPLStargGroundImpulse& param_1);

    LWAPI(0x02034244, 0x00419240)
    bool ProcessMessage(fnd::Message& msg);

    LWAPI(0x0203424C, TODO)
    void GetCameraDirectionForPlayer(csl::math::Vector3& param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);

    LWAPI(0x0203437C, TODO)
    void UpdateTargetPositionOffset(float param_1);

    LWAPI(0x02034608, NONE)
    void AddCameraParam(const csl::math::Vector3& param_1, const csl::math::Vector3& param_2, float scale)
    {
        field_0x1E0.Copy(field_0x1E0 + (param_1 * scale));
        field_0x1F0.Copy(field_0x1F0 + (param_2 * scale));
    }

    LWAPI(0x020346F0, TODO)
    void InterpolateRelativeCoordinate(float param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);

    LWAPI(0x02034854, TODO)
    void InterpolateAbsoluteCoordinate(float param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);

    LWAPI(0x0203495C, TODO)
    void InterpolateRelativeXZCoordinate(float param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);

    LWAPI(0x020350B8, 0x00417d60)
    void Update(const fnd::SUpdateInfo& param_1);

    LWAPI(0x020351DC, 0x00418920)
    CCamera(const SCinfo& param_1);

    LWAPI(0x0203540C, 0x00419580)
    void AddCallback(GameDocument* gameDoc);

    LWAPI(0x020354F4, NONE)
    inline void SetOffsetFovy(float fovyOffset)
    {
        m_fovyOffset = fovyOffset;
    }

    LWAPI(0x020354FC, TODO)
    void GetCameraVelocityForPlayer(csl::math::Vector3& param_1);

    LWAPI(0x0203554C, TODO)
    void MultiCameraIsValid();

    LWAPI(0x0203557C, TODO)
    void CalculateNDC(const csl::math::Vector3& param_1, csl::math::Vector3* param_2) const;

    LWAPI(0x020355D4, NONE)
    void ProcMsgBeginBoost(xgame::MsgBeginBoost& param_1);

    LWAPI(0x02035678, NONE)
    void ProcMsgEndBoost(xgame::MsgEndBoost& param_1);
};
} // Camera
} // app
