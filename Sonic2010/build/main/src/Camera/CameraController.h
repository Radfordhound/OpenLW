// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include <csl/ut/bitset.h>
#include <csl/math/vector3.h>
#include <csl/math/vector2.h>
#include <Hedgehog/Base/System/hhObject.h>
#include <Hedgehog/Base/System/hhMemory.h>

namespace csl
{
namespace fnd
{
struct IAllocator;
} // fnd
} // csl

namespace app
{
namespace fnd
{
struct SUpdateInfo;
struct Message;
} // fnd

namespace Camera
{
class CCamera;
struct EnterEventArgs;
struct SPlayer3DCameraParam;
struct SPlayer3DCameraParamDashMode;

class CCameraController : public hh::base::CRefCountObject
{
OPENLW_PRIVATE
    CCamera* m_camera;
    float m_fovy;
    csl::math::Vector3 m_pos;
    csl::math::Vector3 m_up;
    csl::math::Vector3 m_targetPos;
    void* field_0x40;
    csl::fnd::IAllocator* m_debugAllocator;
    csl::math::Vector2 field_0x48;
    bool field_0x50;
    bool m_isActive;
    csl::ut::Bitset<unsigned int> m_flags;
    char padding1[8]; // TODO

public:
    LWAPI(0x02035DD0, TODO)
    static void* operator new(std::size_t size);

    LWAPI(0x02035E0C, TODO)
    static void operator delete(void* ptr);

    LWAPI(0x02035E44, TODO)
    static void* operator new(std::size_t size, const CHedgehogMemoryAllocatorFileLine& param_2, CHedgehogMemoryAllocatorHeap param_3);

    LWAPI(0x02035EC8, TODO)
    CCameraController();

    LWAPI(0x02035FB4, TODO)
    ~CCameraController();

    LWAPI(0x02036008, TODO)
    virtual void ResetCamera(csl::math::Vector3& param_1, csl::math::Vector3& param_2);

    LWAPI(0x0203600C, TODO)
    virtual void RestartCamera();

    LWAPI(0x02036010, TODO)
    virtual void Update(const fnd::SUpdateInfo& param_1);

    LWAPI(0x02036014, TODO)
    void SetActive(bool param_1);

    LWAPI(0x0203601C, 0x00419BA0)
    virtual void OnEnter(EnterEventArgs& param_1);

    LWAPI(0x02036024, TODO)
    virtual void OnLeave();

    LWAPI(0x0203602C, TODO)
    virtual void BeginBoostCamera();

    LWAPI(0x02036030, TODO)
    virtual void EndBoostCamera();

    LWAPI(0x02036034, TODO)
    virtual void BeginQuickStep();

    LWAPI(0x02036038, TODO)
    virtual void EndQuickStep();

    LWAPI(0x0203603C, TODO)
    virtual void Set3DCameraParam(const SPlayer3DCameraParam& param_1);

    LWAPI(0x02036040, TODO)
    virtual void Set3DCameraParamDashMode(const SPlayer3DCameraParamDashMode& param_1);

    LWAPI(0x02036044, TODO)
    virtual void SetCameraReset(const csl::math::Vector3& param_1, const csl::math::Vector3& param_2);

    LWAPI(0x02036048, TODO)
    virtual bool IsDistFar();

    LWAPI(0x02036050, TODO)
    virtual void FocusChange();

    LWAPI(0x02036054, TODO)
    void GetFovy() const;

    LWAPI(0x0203605C, TODO)
    void GetCameraParam(csl::math::Vector3& param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);

    LWAPI(0x020360D0, TODO)
    void SetCollisionEnable(bool param_1);

    LWAPI(0x02036104, TODO)
    void IsCollisionEnable() const;

    LWAPI(0x02036110, TODO)
    void SetPhantomCamera();

    LWAPI(0x0203611C, TODO)
    void IsPhantomCamera() const;

    LWAPI(0x02036128, TODO)
    void SetDebugCamera();

    LWAPI(0x02036134, TODO)
    void IsDebugCamera() const;

    LWAPI(0x02036140, TODO)
    void SetMultiCamera();

    LWAPI(0x0203614C, TODO)
    void IsMultiCamera() const;

    LWAPI(0x02036158, TODO)
    void SetPreview();

    LWAPI(0x02036164, TODO)
    void IsPreview() const;

    LWAPI(0x02036170, TODO)
    virtual bool ProcessMessage(fnd::Message& param_1);

    LWAPI(0x02036178, TODO)
    void SetFovy(float param_1);

    LWAPI(0x02036180, TODO)
    void SetCameraParam(const csl::math::Vector3& param_1, const csl::math::Vector3& param_2, const csl::math::Vector3& param_3);

    LWAPI(0x020361C0, TODO)
    void GetCameraTargetPositionForPlayer(bool param_1);

    LWAPI(0x02036220, TODO)
    void GetCameraVelocityForPlayer(csl::math::Vector3& param_1);

    LWAPI(0x02036238, TODO)
    void GetCameraDirectionForPlayer(csl::math::Vector3& param_1, csl::math::Vector3& param_2, csl::math::Vector3& param_3);
};
} // Camera
} // app
