// TODO: Both the name of this file and its path were guessed!
// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "StateDesc.h"
#include <System/ReferencedObject.h>
#include <csl/ut/array.h>

namespace app
{
namespace ut
{
namespace internal
{
struct StateDescImpl;
struct StateImpl;

class StateManagerImpl : public fnd::ReferencedObject
{
OPENLW_PRIVATE
    csl::ut::MoveArray<const StateDescImpl*> m_stateDescImpls;

public:
    LWAPI(0x02ab3d4c, 0x00e06420)
    ~StateManagerImpl();

    LWAPI(0x02ab3c5c, 0x009234b0)
    StateManagerImpl(int stateDescCount);

    LWAPI(0x02ab3dbc, 0x008580b0)
    void RegisterState(int stateID, const StateDescImpl* stateDescImpl);

    LWAPI(0x02ab3dec, TODO)
    std::size_t GetNumStateDesc() const;

    LWAPI(0x02ab3e04, TODO)
    const StateDescImpl* GetStateDesc(int stateID) const;

    LWAPI(0x02ab3e2c, TODO)
    StateImpl* Create(int stateID);

    LWAPI(0x02ab3e90, TODO)
    int GetSuper(int stateID) const;

    LWAPI(0x02ab3ebc, TODO)
    bool IsSuper(int stateID, int superID) const;
};

LWAPI_STATIC_ASSERT_SIZE(StateManagerImpl, 0x1c)
} // internal

template<class ContextType>
class StateManager : public internal::StateManagerImpl
{
public:
    void RegisterState(int stateID, const StateDesc<ContextType>* stateDesc)
    {
        StateManagerImpl::RegisterState(stateID, stateDesc);
    }
};
} // ut
} // app
