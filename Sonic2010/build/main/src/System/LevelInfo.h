// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once
#include "GameService.h"

namespace app
{
// TODO: Move this to another header?
struct SPlayerInfo
{
    unsigned char unknown1[28];
};

LWAPI_STATIC_ASSERT_SIZE(SPlayerInfo, 28)

namespace Game
{
// TODO: Move this to another header?
enum EUser
{
    // TODO
};

// TODO: Move this to another header?
enum EPlayMode
{
    // TODO
};
} // Game

namespace xgame
{
class MsgLevelEnded;
} // xgame

namespace StageInfo
{
struct SStageData;
} // StageInfo

class CLevelInfo : public fnd::GameService
{
OPENLW_PRIVATE
    // TODO: Data members

public:
    LWAPI(0x02a8cc44, TODO)
    CLevelInfo();

    LWAPI(0x02a8ce34, 0x009126c0)
    ~CLevelInfo();

    LWAPI(0x02a8ce3c, TODO)
    void ProcMsgLevelEnded(xgame::MsgLevelEnded& param_1);

    LWAPI(0x02a8cec4, 0x00912430)
    bool ProcessMessage(fnd::Message& param_1);

    LWAPI(0x02a8cfec, 0x00912620)
    void Update(const fnd::SUpdateInfo& param_1);

    LWAPI(0x02a8cffc, 0x009123d0)
    static const fnd::GameServiceClass& staticClass();

    LWAPI(0x02a8d008, TODO)
    void ReflectStageInfo(const StageInfo::SStageData& param_1);

    LWAPI(0x02a8d018, TODO)
    unsigned int GetPlayerID() const;

    LWAPI(0x02a8d07c, 0x00912550)
    unsigned int GetPlayerID(int playerNo) const;

    LWAPI(0x02a8d0a4, 0x00912570)
    unsigned int GetPlayerNo(unsigned int actorID) const;

    // TODO: PC address here is the one from LWAPI. Is this correct?
    LWAPI(0x02a8d108, 0x009125A0)
    const SPlayerInfo* GetPlayerInfo(int playerNo) const;

    // TODO: PC address here is the one from LWAPI. Is this correct?
    LWAPI(0x02a8d110, 0x009125A0)
    const SPlayerInfo* GetPlayerInfo(unsigned int playerNo) const;

    LWAPI(0x02a8d118, TODO)
    const SPlayerInfo* GetPlayerInfo(Game::EUser param_1) const;

    // TODO: PC address here is the one from LWAPI. Is this correct?
    LWAPI(0x02a8d120, 0x009125A0)
    SPlayerInfo* GetPlayerInfo(int playerNo);

    // TODO: PC address here is the one from LWAPI. Is this correct?
    LWAPI(0x02a8d128, 0x009125A0)
    SPlayerInfo* GetPlayerInfo(unsigned int playerNo);

    LWAPI(0x02a8d130, TODO)
    SPlayerInfo* GetPlayerInfo(Game::EUser param_1);

    LWAPI(0x02a8d138, TODO)
    bool IsPlayer(unsigned int param_1) const;

    LWAPI(0x02a8d160, TODO)
    void GetUser(unsigned int param_1);

    LWAPI(0x02a8d1f8, 0x00912400)
    bool IsBattle() const;

    LWAPI(0x02a8d20c, TODO)
    bool IsTimeAttack() const;

    LWAPI(0x02a8d220, TODO)
    bool IsMiniGame() const;

    LWAPI(0x02a8d250, TODO)
    void NotCountScore() const;

    LWAPI(0x02a8d25c, TODO)
    void NotCountAnimal() const;

    LWAPI(0x02a8d268, TODO)
    void HideRedRing() const;

    LWAPI(0x02a8d274, TODO)
    void GetNumPlayers() const;

    LWAPI(0x02a8d29c, TODO)
    void GetFlagRedRingObtained(int param_1) const;

    LWAPI(0x02a8d2e8, TODO)
    void SetRhythmPhantom(bool param_1);

    LWAPI(0x02a8d2f8, TODO)
    bool IsNowRhythmPhantom() const;

    LWAPI(0x02a8d36c, TODO)
    void GetStageRootPath();

    LWAPI(0x02a8d37c, TODO)
    void SetBossOpeningFlag(int param_1);

    LWAPI(0x02a8d3b0, TODO)
    bool IsPlayedBossOpening(int param_1) const;

    LWAPI(0x02a8d448, TODO)
    void SetDLCStage(unsigned int param_1);

    LWAPI(0x02a8d468, TODO)
    void GetDLCStageIndex() const;

    LWAPI(0x02a8d4f4, TODO)
    bool IsDLCStage() const;

    LWAPI(0x02a8d51c, TODO)
    void SetPlayingZeldaEvent(bool param_1);

    LWAPI(0x02a8d52c, TODO)
    bool IsPlayingZeldaEvent();

    LWAPI(0x02a8d538, TODO)
    void SetPlayMode(Game::EPlayMode param_1);

    LWAPI(0x02a8d5c8, TODO)
    void SetFlagRedRingObtained(int param_1, bool param_2);

    LWAPI(0x02a8d6a4, TODO)
    void SetupRoutePath(const char* param_1);
};
} // app
