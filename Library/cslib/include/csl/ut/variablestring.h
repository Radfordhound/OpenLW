// TODO: Both the name of this file and its path were guessed!
// NOTE: Initial file was auto-generated by SymbolsDB.
#pragma once

namespace csl
{
namespace fnd
{
struct IAllocator;
} // fnd

namespace ut
{
class VariableString
{
OPENLW_PRIVATE
    char* m_data;
    fnd::IAllocator* m_allocator;

    // TODO: Does this function actually exist?
    char* getDataPointer() const;

    // TODO: Does this function actually exist?
    bool needsFree() const;

public:
    LWAPI(0x02ca9708, 0x00962c80)
    const char* c_str() const;

    LWAPI(0x02ca9728, 0x00962d10)
    void assign(fnd::IAllocator* allocator, const char* data, int len = -1);

    LWAPI(0x02ca98a0, 0x00962e00)
    VariableString(const char* data, fnd::IAllocator* allocator);

    LWAPI(0x02ca9918, 0x00962e30)
    VariableString(const char* data, int len, fnd::IAllocator* allocator);

    LWAPI(0x02ca999c, 0x00962e60)
    VariableString(const VariableString& other);

    LWAPI(0x02ca9a10, 0x00962ea0)
    ~VariableString();

    LWAPI(0x02ca9a6c, NONE)
    VariableString& operator=(const char* data)
    {
        assign(m_allocator, data);
        return *this;
    }

    LWAPI(0x02ca9aa8, 0x00962f00)
    VariableString& operator=(const VariableString& other);

    LWAPI(0x02ca9af0, 0x00962f30)
    void Set(fnd::IAllocator* allocator, const char* data, int len = -1);

    LWAPI(0x02ca9af4, 0x00962c90)
    void SetDataUserFree(fnd::IAllocator* allocator, const char* data);

    LWAPI(0x02ca9b00, 0x00962cb0)
    int compareTo(const char* data) const;
};

LWAPI_STATIC_ASSERT_SIZE(VariableString, 8)
} // ut
} // csl
